#pragma once


#include "acme_posix/file.h"


//class FileException;
//struct FileStatus;


//void CLASS_DECL_ACME vfxGetRoot(const widechar * pszPath, string& wstrRoot);

//void CLASS_DECL_ACME vfxGetRoot(wstring & wstrRoot, const wstring & wstrPath);


/////////////////////////////////////////////////////////////////////////////
// File - raw unbuffered disk file I/O

#define INVALID_FILE -1

namespace acme_freebsd
{


   class CLASS_DECL_ACME file :
      virtual public ::acme_darwin::file
   {
   public:


//      enum Attribute
//      {
//         normal =    0x00,
//         readOnly =  0x01,
//         hidden =    0x02,
//         system =    0x04,
//         volume =    0x08,
//         directory = 0x10,
//         archive =   0x20
//      };

//      enum BufferCommand
//      {
//
//         bufferRead,
//         bufferWrite,
//         bufferCommit,
//         bufferCheck
//
//      };

      int                  m_iFile;
      int                  m_iPutCharacter;


      file();
      ~file() override;


//      //void assert_ok() const override;
//      //void dump(dump_context & dumpcontext) const override;
//
//      filesize get_position() const override;
//
//
//      bool GetStatus(::file::file_status & rStatus) const;
//      virtual string GetFileName() const;
//      virtual string GetFileTitle() const;
//      virtual string GetFilePath() const;
//      virtual void SetFilePath(const char * pszNewName);
//
//
//      void open(const ::file::path & path, ::file::e_open eopen, ::pointer < ::file::exception > * pfileexception = nullptr) override;
//
//
//      //virtual bool PASCAL GetStatus(const char * pszFileName, ::file::file_status& rStatus);
//
//      u64 ReadHuge(void * pBuffer, u64 dwCount);
//
//      void WriteHuge(const void * pBuffer, u64 dwCount);
//
//
////      virtual __pointer(::file::file) Duplicate() const;
//
//      void translate(::filesize offset, ::enum_seek eseek) override;
//      void set_size(filesize dwNewLen) override;
//      filesize size() const override;
//
//      memsize read(void * pdata, memsize nCount) override;
//
//      void write(const void * pdata, memsize nCount) override;
//
//
//      virtual void LockRange(filesize dwPos, filesize dwCount);
//      virtual void UnlockRange(filesize dwPos, filesize dwCount);
//
//      virtual void Abort();
//      void flush() override;
//      void close() override;
//
//      virtual bool IsOpened();
//
//      virtual u64 GetBufferPtr(::u32 nCommand, u64 nCount = 0, void ** ppBufStart = nullptr, void ** ppBufMax = nullptr);
//
//
//      //int put_character_back(int iCharacter) override;


   };


//   namespace file_exception
//   {
//
//
//      ::e_status os_error_to_exception(::i32 lOsError);
////      ::e_status PASCAL ErrnoToException(i32 nErrno);
//      void throw_os_error(::i32 lOsError, const char * pszFileName = nullptr);

//      //void PASCAL ThrowErrno(__pointer(::acme::application) papp, i32 nErrno, const char * pszFileName = nullptr);

//
//
//   }  // namespace file_exception


} // namepsace acme_freebsd


//bool CLASS_DECL_ACME vfxFullPath(wstring & wstrFullPath, const wstring & wstrPath);



